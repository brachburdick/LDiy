import { Options } from './packet';
interface Props {
    universe: number;
    port?: number;
    reuseAddr?: boolean;
    /**
     * How often the data should be re-sent (**in Hertz/Hz**), even if it hasn't changed.
     *
     * By default data will only be sent once (equivilant of setting `refreshRate: 0`).
     *
     * To re-send data 5 times per second (`5Hz`), set `refreshRate: 5`. This is equivilant to `200ms`.
     */
    minRefreshRate?: number;
    /** some options can be sepecified when you instantiate the sender, instead of sepecifying them on every packet */
    defaultPacketOptions?: Pick<Options, 'cid' | 'sourceName' | 'priority'>;
    iface?: string;
    /**
     * If you set this option to an IP address, then data will be sent
     * purely to this address, instead of the whole network.
     *
     * This option is not recommended and may not be supported by all devices.
     */
    useUnicastDestination?: string;
}
export declare class Sender {
    #private;
    private socket;
    private readonly port;
    readonly universe: Props['universe'];
    private readonly defaultPacketOptions;
    private sequence;
    constructor({ universe, port, reuseAddr, minRefreshRate, defaultPacketOptions, iface, useUnicastDestination, }: Props);
    send(packet: Omit<Options, 'sequence' | 'universe'>): Promise<void>;
    private reSend;
    close(): this;
}
export {};
